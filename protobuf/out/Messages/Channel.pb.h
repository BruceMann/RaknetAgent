// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Messages/Channel.proto

#ifndef PROTOBUF_Messages_2fChannel_2eproto__INCLUDED
#define PROTOBUF_Messages_2fChannel_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Messages_2fChannel_2eproto();
void protobuf_AssignDesc_Messages_2fChannel_2eproto();
void protobuf_ShutdownFile_Messages_2fChannel_2eproto();

class ClassStartParam;
class ClassResultParam;
class Channel;

// ===================================================================

class ClassStartParam : public ::google::protobuf::Message {
 public:
  ClassStartParam();
  virtual ~ClassStartParam();

  ClassStartParam(const ClassStartParam& from);

  inline ClassStartParam& operator=(const ClassStartParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassStartParam& default_instance();

  void Swap(ClassStartParam* other);

  // implements Message ----------------------------------------------

  ClassStartParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClassStartParam& from);
  void MergeFrom(const ClassStartParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string webstie = 1;
  inline bool has_webstie() const;
  inline void clear_webstie();
  static const int kWebstieFieldNumber = 1;
  inline const ::std::string& webstie() const;
  inline void set_webstie(const ::std::string& value);
  inline void set_webstie(const char* value);
  inline void set_webstie(const char* value, size_t size);
  inline ::std::string* mutable_webstie();
  inline ::std::string* release_webstie();
  inline void set_allocated_webstie(::std::string* webstie);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string password = 3;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 3;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // optional string classid = 4;
  inline bool has_classid() const;
  inline void clear_classid();
  static const int kClassidFieldNumber = 4;
  inline const ::std::string& classid() const;
  inline void set_classid(const ::std::string& value);
  inline void set_classid(const char* value);
  inline void set_classid(const char* value, size_t size);
  inline ::std::string* mutable_classid();
  inline ::std::string* release_classid();
  inline void set_allocated_classid(::std::string* classid);

  // optional string uniqueid = 5;
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueidFieldNumber = 5;
  inline const ::std::string& uniqueid() const;
  inline void set_uniqueid(const ::std::string& value);
  inline void set_uniqueid(const char* value);
  inline void set_uniqueid(const char* value, size_t size);
  inline ::std::string* mutable_uniqueid();
  inline ::std::string* release_uniqueid();
  inline void set_allocated_uniqueid(::std::string* uniqueid);

  // @@protoc_insertion_point(class_scope:ClassStartParam)
 private:
  inline void set_has_webstie();
  inline void clear_has_webstie();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_classid();
  inline void clear_has_classid();
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* webstie_;
  ::std::string* name_;
  ::std::string* password_;
  ::std::string* classid_;
  ::std::string* uniqueid_;
  friend void  protobuf_AddDesc_Messages_2fChannel_2eproto();
  friend void protobuf_AssignDesc_Messages_2fChannel_2eproto();
  friend void protobuf_ShutdownFile_Messages_2fChannel_2eproto();

  void InitAsDefaultInstance();
  static ClassStartParam* default_instance_;
};
// -------------------------------------------------------------------

class ClassResultParam : public ::google::protobuf::Message {
 public:
  ClassResultParam();
  virtual ~ClassResultParam();

  ClassResultParam(const ClassResultParam& from);

  inline ClassResultParam& operator=(const ClassResultParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClassResultParam& default_instance();

  void Swap(ClassResultParam* other);

  // implements Message ----------------------------------------------

  ClassResultParam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClassResultParam& from);
  void MergeFrom(const ClassResultParam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 port = 1;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 1;
  inline ::google::protobuf::int32 port() const;
  inline void set_port(::google::protobuf::int32 value);

  // optional string ip = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:ClassResultParam)
 private:
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* ip_;
  ::google::protobuf::int32 port_;
  friend void  protobuf_AddDesc_Messages_2fChannel_2eproto();
  friend void protobuf_AssignDesc_Messages_2fChannel_2eproto();
  friend void protobuf_ShutdownFile_Messages_2fChannel_2eproto();

  void InitAsDefaultInstance();
  static ClassResultParam* default_instance_;
};
// -------------------------------------------------------------------

class Channel : public ::google::protobuf::Message {
 public:
  Channel();
  virtual ~Channel();

  Channel(const Channel& from);

  inline Channel& operator=(const Channel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Channel& default_instance();

  enum BodyCase {
    kStartParam = 1,
    kResultParam = 2,
    BODY_NOT_SET = 0,
  };

  void Swap(Channel* other);

  // implements Message ----------------------------------------------

  Channel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Channel& from);
  void MergeFrom(const Channel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ClassStartParam startParam = 1;
  inline bool has_startparam() const;
  inline void clear_startparam();
  static const int kStartParamFieldNumber = 1;
  inline const ::ClassStartParam& startparam() const;
  inline ::ClassStartParam* mutable_startparam();
  inline ::ClassStartParam* release_startparam();
  inline void set_allocated_startparam(::ClassStartParam* startparam);

  // optional .ClassResultParam resultParam = 2;
  inline bool has_resultparam() const;
  inline void clear_resultparam();
  static const int kResultParamFieldNumber = 2;
  inline const ::ClassResultParam& resultparam() const;
  inline ::ClassResultParam* mutable_resultparam();
  inline ::ClassResultParam* release_resultparam();
  inline void set_allocated_resultparam(::ClassResultParam* resultparam);

  inline BodyCase body_case() const;
  // @@protoc_insertion_point(class_scope:Channel)
 private:
  inline void set_has_startparam();
  inline void set_has_resultparam();

  inline bool has_body();
  void clear_body();
  inline void clear_has_body();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  union BodyUnion {
    ::ClassStartParam* startparam_;
    ::ClassResultParam* resultparam_;
  } body_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_Messages_2fChannel_2eproto();
  friend void protobuf_AssignDesc_Messages_2fChannel_2eproto();
  friend void protobuf_ShutdownFile_Messages_2fChannel_2eproto();

  void InitAsDefaultInstance();
  static Channel* default_instance_;
};
// ===================================================================


// ===================================================================

// ClassStartParam

// optional string webstie = 1;
inline bool ClassStartParam::has_webstie() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClassStartParam::set_has_webstie() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClassStartParam::clear_has_webstie() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClassStartParam::clear_webstie() {
  if (webstie_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webstie_->clear();
  }
  clear_has_webstie();
}
inline const ::std::string& ClassStartParam::webstie() const {
  // @@protoc_insertion_point(field_get:ClassStartParam.webstie)
  return *webstie_;
}
inline void ClassStartParam::set_webstie(const ::std::string& value) {
  set_has_webstie();
  if (webstie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webstie_ = new ::std::string;
  }
  webstie_->assign(value);
  // @@protoc_insertion_point(field_set:ClassStartParam.webstie)
}
inline void ClassStartParam::set_webstie(const char* value) {
  set_has_webstie();
  if (webstie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webstie_ = new ::std::string;
  }
  webstie_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClassStartParam.webstie)
}
inline void ClassStartParam::set_webstie(const char* value, size_t size) {
  set_has_webstie();
  if (webstie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webstie_ = new ::std::string;
  }
  webstie_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClassStartParam.webstie)
}
inline ::std::string* ClassStartParam::mutable_webstie() {
  set_has_webstie();
  if (webstie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    webstie_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClassStartParam.webstie)
  return webstie_;
}
inline ::std::string* ClassStartParam::release_webstie() {
  clear_has_webstie();
  if (webstie_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = webstie_;
    webstie_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClassStartParam::set_allocated_webstie(::std::string* webstie) {
  if (webstie_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete webstie_;
  }
  if (webstie) {
    set_has_webstie();
    webstie_ = webstie;
  } else {
    clear_has_webstie();
    webstie_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClassStartParam.webstie)
}

// optional string name = 2;
inline bool ClassStartParam::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClassStartParam::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClassStartParam::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClassStartParam::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ClassStartParam::name() const {
  // @@protoc_insertion_point(field_get:ClassStartParam.name)
  return *name_;
}
inline void ClassStartParam::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:ClassStartParam.name)
}
inline void ClassStartParam::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClassStartParam.name)
}
inline void ClassStartParam::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClassStartParam.name)
}
inline ::std::string* ClassStartParam::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClassStartParam.name)
  return name_;
}
inline ::std::string* ClassStartParam::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClassStartParam::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClassStartParam.name)
}

// optional string password = 3;
inline bool ClassStartParam::has_password() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClassStartParam::set_has_password() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClassStartParam::clear_has_password() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClassStartParam::clear_password() {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& ClassStartParam::password() const {
  // @@protoc_insertion_point(field_get:ClassStartParam.password)
  return *password_;
}
inline void ClassStartParam::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:ClassStartParam.password)
}
inline void ClassStartParam::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClassStartParam.password)
}
inline void ClassStartParam::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClassStartParam.password)
}
inline ::std::string* ClassStartParam::mutable_password() {
  set_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClassStartParam.password)
  return password_;
}
inline ::std::string* ClassStartParam::release_password() {
  clear_has_password();
  if (password_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClassStartParam::set_allocated_password(::std::string* password) {
  if (password_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClassStartParam.password)
}

// optional string classid = 4;
inline bool ClassStartParam::has_classid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClassStartParam::set_has_classid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClassStartParam::clear_has_classid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClassStartParam::clear_classid() {
  if (classid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    classid_->clear();
  }
  clear_has_classid();
}
inline const ::std::string& ClassStartParam::classid() const {
  // @@protoc_insertion_point(field_get:ClassStartParam.classid)
  return *classid_;
}
inline void ClassStartParam::set_classid(const ::std::string& value) {
  set_has_classid();
  if (classid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    classid_ = new ::std::string;
  }
  classid_->assign(value);
  // @@protoc_insertion_point(field_set:ClassStartParam.classid)
}
inline void ClassStartParam::set_classid(const char* value) {
  set_has_classid();
  if (classid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    classid_ = new ::std::string;
  }
  classid_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClassStartParam.classid)
}
inline void ClassStartParam::set_classid(const char* value, size_t size) {
  set_has_classid();
  if (classid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    classid_ = new ::std::string;
  }
  classid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClassStartParam.classid)
}
inline ::std::string* ClassStartParam::mutable_classid() {
  set_has_classid();
  if (classid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    classid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClassStartParam.classid)
  return classid_;
}
inline ::std::string* ClassStartParam::release_classid() {
  clear_has_classid();
  if (classid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = classid_;
    classid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClassStartParam::set_allocated_classid(::std::string* classid) {
  if (classid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete classid_;
  }
  if (classid) {
    set_has_classid();
    classid_ = classid;
  } else {
    clear_has_classid();
    classid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClassStartParam.classid)
}

// optional string uniqueid = 5;
inline bool ClassStartParam::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClassStartParam::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClassStartParam::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClassStartParam::clear_uniqueid() {
  if (uniqueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uniqueid_->clear();
  }
  clear_has_uniqueid();
}
inline const ::std::string& ClassStartParam::uniqueid() const {
  // @@protoc_insertion_point(field_get:ClassStartParam.uniqueid)
  return *uniqueid_;
}
inline void ClassStartParam::set_uniqueid(const ::std::string& value) {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uniqueid_ = new ::std::string;
  }
  uniqueid_->assign(value);
  // @@protoc_insertion_point(field_set:ClassStartParam.uniqueid)
}
inline void ClassStartParam::set_uniqueid(const char* value) {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uniqueid_ = new ::std::string;
  }
  uniqueid_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClassStartParam.uniqueid)
}
inline void ClassStartParam::set_uniqueid(const char* value, size_t size) {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uniqueid_ = new ::std::string;
  }
  uniqueid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClassStartParam.uniqueid)
}
inline ::std::string* ClassStartParam::mutable_uniqueid() {
  set_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    uniqueid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClassStartParam.uniqueid)
  return uniqueid_;
}
inline ::std::string* ClassStartParam::release_uniqueid() {
  clear_has_uniqueid();
  if (uniqueid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = uniqueid_;
    uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClassStartParam::set_allocated_uniqueid(::std::string* uniqueid) {
  if (uniqueid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete uniqueid_;
  }
  if (uniqueid) {
    set_has_uniqueid();
    uniqueid_ = uniqueid;
  } else {
    clear_has_uniqueid();
    uniqueid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClassStartParam.uniqueid)
}

// -------------------------------------------------------------------

// ClassResultParam

// optional int32 port = 1;
inline bool ClassResultParam::has_port() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClassResultParam::set_has_port() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClassResultParam::clear_has_port() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClassResultParam::clear_port() {
  port_ = 0;
  clear_has_port();
}
inline ::google::protobuf::int32 ClassResultParam::port() const {
  // @@protoc_insertion_point(field_get:ClassResultParam.port)
  return port_;
}
inline void ClassResultParam::set_port(::google::protobuf::int32 value) {
  set_has_port();
  port_ = value;
  // @@protoc_insertion_point(field_set:ClassResultParam.port)
}

// optional string ip = 2;
inline bool ClassResultParam::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClassResultParam::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClassResultParam::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClassResultParam::clear_ip() {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& ClassResultParam::ip() const {
  // @@protoc_insertion_point(field_get:ClassResultParam.ip)
  return *ip_;
}
inline void ClassResultParam::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set:ClassResultParam.ip)
}
inline void ClassResultParam::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
  // @@protoc_insertion_point(field_set_char:ClassResultParam.ip)
}
inline void ClassResultParam::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ClassResultParam.ip)
}
inline ::std::string* ClassResultParam::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ip_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:ClassResultParam.ip)
  return ip_;
}
inline ::std::string* ClassResultParam::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ClassResultParam::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:ClassResultParam.ip)
}

// -------------------------------------------------------------------

// Channel

// optional .ClassStartParam startParam = 1;
inline bool Channel::has_startparam() const {
  return body_case() == kStartParam;
}
inline void Channel::set_has_startparam() {
  _oneof_case_[0] = kStartParam;
}
inline void Channel::clear_startparam() {
  if (has_startparam()) {
    delete body_.startparam_;
    clear_has_body();
  }
}
inline const ::ClassStartParam& Channel::startparam() const {
  return has_startparam() ? *body_.startparam_
                      : ::ClassStartParam::default_instance();
}
inline ::ClassStartParam* Channel::mutable_startparam() {
  if (!has_startparam()) {
    clear_body();
    set_has_startparam();
    body_.startparam_ = new ::ClassStartParam;
  }
  return body_.startparam_;
}
inline ::ClassStartParam* Channel::release_startparam() {
  if (has_startparam()) {
    clear_has_body();
    ::ClassStartParam* temp = body_.startparam_;
    body_.startparam_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Channel::set_allocated_startparam(::ClassStartParam* startparam) {
  clear_body();
  if (startparam) {
    set_has_startparam();
    body_.startparam_ = startparam;
  }
}

// optional .ClassResultParam resultParam = 2;
inline bool Channel::has_resultparam() const {
  return body_case() == kResultParam;
}
inline void Channel::set_has_resultparam() {
  _oneof_case_[0] = kResultParam;
}
inline void Channel::clear_resultparam() {
  if (has_resultparam()) {
    delete body_.resultparam_;
    clear_has_body();
  }
}
inline const ::ClassResultParam& Channel::resultparam() const {
  return has_resultparam() ? *body_.resultparam_
                      : ::ClassResultParam::default_instance();
}
inline ::ClassResultParam* Channel::mutable_resultparam() {
  if (!has_resultparam()) {
    clear_body();
    set_has_resultparam();
    body_.resultparam_ = new ::ClassResultParam;
  }
  return body_.resultparam_;
}
inline ::ClassResultParam* Channel::release_resultparam() {
  if (has_resultparam()) {
    clear_has_body();
    ::ClassResultParam* temp = body_.resultparam_;
    body_.resultparam_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Channel::set_allocated_resultparam(::ClassResultParam* resultparam) {
  clear_body();
  if (resultparam) {
    set_has_resultparam();
    body_.resultparam_ = resultparam;
  }
}

inline bool Channel::has_body() {
  return body_case() != BODY_NOT_SET;
}
inline void Channel::clear_has_body() {
  _oneof_case_[0] = BODY_NOT_SET;
}
inline Channel::BodyCase Channel::body_case() const {
  return Channel::BodyCase(_oneof_case_[0]);
}

// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Messages_2fChannel_2eproto__INCLUDED
